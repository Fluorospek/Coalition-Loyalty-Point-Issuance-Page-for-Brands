// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  userId       Int            @id @default(autoincrement())
  email        String         @unique
  name         String
  password     String
  createdAt    DateTime       @default(now())
  brands       Brand[]
  // brandTokens  BrandTokens[]
  issuedPoints IssuedPoints[]
  transactions Transactions[]
}

model Brand {
  brandId      Int      @id @default(autoincrement())
  userId       Int      @unique
  brandName    String
  description  String?
  otherDetails Json?
  createdAt    DateTime @default(now())

  user         User           @relation(fields: [userId], references: [userId])
  IssuedPoints IssuedPoints[]
  Transactions Transactions[]
  brandTokens  BrandTokens[]
}

model BrandTokens {
  brandTokenId Int      @id @default(autoincrement())
  // userId       Int      @unique
  brandId      Int      @unique
  pointName    String
  symbol       String
  createdAt    DateTime @default(now())

  // user         User           @relation(fields: [userId], references: [userId])
  brand        Brand          @relation(fields: [brandId], references: [brandId])
  IssuedPoints IssuedPoints[]
  Transactions Transactions[]
}

model IssuedPoints {
  issuedPointId Int      @id @default(autoincrement())
  userId        Int
  brandId       Int
  brandTokenId  Int
  points        Int
  createdAt     DateTime @default(now())

  user         User           @relation(fields: [userId], references: [userId])
  brand        Brand          @relation(fields: [brandId], references: [brandId])
  brandTokens  BrandTokens    @relation(fields: [brandTokenId], references: [brandTokenId])
  Transactions Transactions[]
}

model Transactions {
  transactionId    Int       @id @default(autoincrement())
  userId           Int
  issuedPointId    Int
  brandId          Int
  brandTokenId     Int
  amount           Int
  transactionType  TransType
  date             DateTime  @default(now())
  senderAddress    String?
  recipientAddress String?
  status           Status

  user         User         @relation(fields: [userId], references: [userId])
  brand        Brand        @relation(fields: [brandId], references: [brandId])
  brandTokens  BrandTokens  @relation(fields: [brandTokenId], references: [brandTokenId])
  IssuedPoints IssuedPoints @relation(fields: [issuedPointId], references: [issuedPointId])
}

enum TransType {
  DEBIT
  CREDIT
}

enum Status {
  PENDING
  COMPLETED
  FAILED
}
